// Code generated by protoc-gen-go. DO NOT EDIT.
// source: hue.proto

package hue

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Empty struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Empty) Reset()         { *m = Empty{} }
func (m *Empty) String() string { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()    {}
func (*Empty) Descriptor() ([]byte, []int) {
	return fileDescriptor_d258138af7183d5a, []int{0}
}

func (m *Empty) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Empty.Unmarshal(m, b)
}
func (m *Empty) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Empty.Marshal(b, m, deterministic)
}
func (m *Empty) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Empty.Merge(m, src)
}
func (m *Empty) XXX_Size() int {
	return xxx_messageInfo_Empty.Size(m)
}
func (m *Empty) XXX_DiscardUnknown() {
	xxx_messageInfo_Empty.DiscardUnknown(m)
}

var xxx_messageInfo_Empty proto.InternalMessageInfo

type LightsRequest struct {
	Group int32 `protobuf:"varint,1,opt,name=Group,proto3" json:"Group,omitempty"`
	// Value between 0 and 1
	BrightnessPercent float32 `protobuf:"fixed32,2,opt,name=BrightnessPercent,proto3" json:"BrightnessPercent,omitempty"`
	// Value between 0 and 1
	SaturationPercent float32 `protobuf:"fixed32,3,opt,name=SaturationPercent,proto3" json:"SaturationPercent,omitempty"`
	// Value between 0 and 65535
	// Red: 65535
	// Green: 25500
	// Blue: 46920
	Hue                  float32  `protobuf:"fixed32,4,opt,name=Hue,proto3" json:"Hue,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LightsRequest) Reset()         { *m = LightsRequest{} }
func (m *LightsRequest) String() string { return proto.CompactTextString(m) }
func (*LightsRequest) ProtoMessage()    {}
func (*LightsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d258138af7183d5a, []int{1}
}

func (m *LightsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LightsRequest.Unmarshal(m, b)
}
func (m *LightsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LightsRequest.Marshal(b, m, deterministic)
}
func (m *LightsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LightsRequest.Merge(m, src)
}
func (m *LightsRequest) XXX_Size() int {
	return xxx_messageInfo_LightsRequest.Size(m)
}
func (m *LightsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_LightsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_LightsRequest proto.InternalMessageInfo

func (m *LightsRequest) GetGroup() int32 {
	if m != nil {
		return m.Group
	}
	return 0
}

func (m *LightsRequest) GetBrightnessPercent() float32 {
	if m != nil {
		return m.BrightnessPercent
	}
	return 0
}

func (m *LightsRequest) GetSaturationPercent() float32 {
	if m != nil {
		return m.SaturationPercent
	}
	return 0
}

func (m *LightsRequest) GetHue() float32 {
	if m != nil {
		return m.Hue
	}
	return 0
}

type LightsResponse struct {
	Success              bool     `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LightsResponse) Reset()         { *m = LightsResponse{} }
func (m *LightsResponse) String() string { return proto.CompactTextString(m) }
func (*LightsResponse) ProtoMessage()    {}
func (*LightsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d258138af7183d5a, []int{2}
}

func (m *LightsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LightsResponse.Unmarshal(m, b)
}
func (m *LightsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LightsResponse.Marshal(b, m, deterministic)
}
func (m *LightsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LightsResponse.Merge(m, src)
}
func (m *LightsResponse) XXX_Size() int {
	return xxx_messageInfo_LightsResponse.Size(m)
}
func (m *LightsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_LightsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_LightsResponse proto.InternalMessageInfo

func (m *LightsResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

type Groups struct {
	Groups               []*Group `protobuf:"bytes,1,rep,name=groups,proto3" json:"groups,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Groups) Reset()         { *m = Groups{} }
func (m *Groups) String() string { return proto.CompactTextString(m) }
func (*Groups) ProtoMessage()    {}
func (*Groups) Descriptor() ([]byte, []int) {
	return fileDescriptor_d258138af7183d5a, []int{3}
}

func (m *Groups) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Groups.Unmarshal(m, b)
}
func (m *Groups) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Groups.Marshal(b, m, deterministic)
}
func (m *Groups) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Groups.Merge(m, src)
}
func (m *Groups) XXX_Size() int {
	return xxx_messageInfo_Groups.Size(m)
}
func (m *Groups) XXX_DiscardUnknown() {
	xxx_messageInfo_Groups.DiscardUnknown(m)
}

var xxx_messageInfo_Groups proto.InternalMessageInfo

func (m *Groups) GetGroups() []*Group {
	if m != nil {
		return m.Groups
	}
	return nil
}

type Group struct {
	ID                   int32    `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	On                   bool     `protobuf:"varint,3,opt,name=On,proto3" json:"On,omitempty"`
	Brightness           int32    `protobuf:"varint,4,opt,name=Brightness,proto3" json:"Brightness,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Group) Reset()         { *m = Group{} }
func (m *Group) String() string { return proto.CompactTextString(m) }
func (*Group) ProtoMessage()    {}
func (*Group) Descriptor() ([]byte, []int) {
	return fileDescriptor_d258138af7183d5a, []int{4}
}

func (m *Group) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Group.Unmarshal(m, b)
}
func (m *Group) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Group.Marshal(b, m, deterministic)
}
func (m *Group) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Group.Merge(m, src)
}
func (m *Group) XXX_Size() int {
	return xxx_messageInfo_Group.Size(m)
}
func (m *Group) XXX_DiscardUnknown() {
	xxx_messageInfo_Group.DiscardUnknown(m)
}

var xxx_messageInfo_Group proto.InternalMessageInfo

func (m *Group) GetID() int32 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *Group) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Group) GetOn() bool {
	if m != nil {
		return m.On
	}
	return false
}

func (m *Group) GetBrightness() int32 {
	if m != nil {
		return m.Brightness
	}
	return 0
}

type SensorRequest struct {
	Sensor               int32    `protobuf:"varint,1,opt,name=Sensor,proto3" json:"Sensor,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SensorRequest) Reset()         { *m = SensorRequest{} }
func (m *SensorRequest) String() string { return proto.CompactTextString(m) }
func (*SensorRequest) ProtoMessage()    {}
func (*SensorRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d258138af7183d5a, []int{5}
}

func (m *SensorRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SensorRequest.Unmarshal(m, b)
}
func (m *SensorRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SensorRequest.Marshal(b, m, deterministic)
}
func (m *SensorRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SensorRequest.Merge(m, src)
}
func (m *SensorRequest) XXX_Size() int {
	return xxx_messageInfo_SensorRequest.Size(m)
}
func (m *SensorRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SensorRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SensorRequest proto.InternalMessageInfo

func (m *SensorRequest) GetSensor() int32 {
	if m != nil {
		return m.Sensor
	}
	return 0
}

type Sensors struct {
	Sensors              []*Sensor `protobuf:"bytes,1,rep,name=sensors,proto3" json:"sensors,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *Sensors) Reset()         { *m = Sensors{} }
func (m *Sensors) String() string { return proto.CompactTextString(m) }
func (*Sensors) ProtoMessage()    {}
func (*Sensors) Descriptor() ([]byte, []int) {
	return fileDescriptor_d258138af7183d5a, []int{6}
}

func (m *Sensors) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Sensors.Unmarshal(m, b)
}
func (m *Sensors) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Sensors.Marshal(b, m, deterministic)
}
func (m *Sensors) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Sensors.Merge(m, src)
}
func (m *Sensors) XXX_Size() int {
	return xxx_messageInfo_Sensors.Size(m)
}
func (m *Sensors) XXX_DiscardUnknown() {
	xxx_messageInfo_Sensors.DiscardUnknown(m)
}

var xxx_messageInfo_Sensors proto.InternalMessageInfo

func (m *Sensors) GetSensors() []*Sensor {
	if m != nil {
		return m.Sensors
	}
	return nil
}

type Sensor struct {
	ID                   int32    `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	UniqueID             string   `protobuf:"bytes,2,opt,name=UniqueID,proto3" json:"UniqueID,omitempty"`
	Name                 string   `protobuf:"bytes,3,opt,name=Name,proto3" json:"Name,omitempty"`
	Type                 string   `protobuf:"bytes,4,opt,name=Type,proto3" json:"Type,omitempty"`
	ManufacturerName     string   `protobuf:"bytes,5,opt,name=ManufacturerName,proto3" json:"ManufacturerName,omitempty"`
	ModelID              string   `protobuf:"bytes,6,opt,name=ModelID,proto3" json:"ModelID,omitempty"`
	SWVersion            string   `protobuf:"bytes,7,opt,name=SWVersion,proto3" json:"SWVersion,omitempty"`
	State                *State   `protobuf:"bytes,8,opt,name=State,proto3" json:"State,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Sensor) Reset()         { *m = Sensor{} }
func (m *Sensor) String() string { return proto.CompactTextString(m) }
func (*Sensor) ProtoMessage()    {}
func (*Sensor) Descriptor() ([]byte, []int) {
	return fileDescriptor_d258138af7183d5a, []int{7}
}

func (m *Sensor) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Sensor.Unmarshal(m, b)
}
func (m *Sensor) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Sensor.Marshal(b, m, deterministic)
}
func (m *Sensor) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Sensor.Merge(m, src)
}
func (m *Sensor) XXX_Size() int {
	return xxx_messageInfo_Sensor.Size(m)
}
func (m *Sensor) XXX_DiscardUnknown() {
	xxx_messageInfo_Sensor.DiscardUnknown(m)
}

var xxx_messageInfo_Sensor proto.InternalMessageInfo

func (m *Sensor) GetID() int32 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *Sensor) GetUniqueID() string {
	if m != nil {
		return m.UniqueID
	}
	return ""
}

func (m *Sensor) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Sensor) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *Sensor) GetManufacturerName() string {
	if m != nil {
		return m.ManufacturerName
	}
	return ""
}

func (m *Sensor) GetModelID() string {
	if m != nil {
		return m.ModelID
	}
	return ""
}

func (m *Sensor) GetSWVersion() string {
	if m != nil {
		return m.SWVersion
	}
	return ""
}

func (m *Sensor) GetState() *State {
	if m != nil {
		return m.State
	}
	return nil
}

type State struct {
	ButtonEvent          int32    `protobuf:"varint,1,opt,name=ButtonEvent,proto3" json:"ButtonEvent,omitempty"`
	Dark                 bool     `protobuf:"varint,2,opt,name=Dark,proto3" json:"Dark,omitempty"`
	Daylight             bool     `protobuf:"varint,3,opt,name=Daylight,proto3" json:"Daylight,omitempty"`
	LastUpdated          string   `protobuf:"bytes,4,opt,name=LastUpdated,proto3" json:"LastUpdated,omitempty"`
	LightLevel           int32    `protobuf:"varint,5,opt,name=LightLevel,proto3" json:"LightLevel,omitempty"`
	Presence             bool     `protobuf:"varint,6,opt,name=Presence,proto3" json:"Presence,omitempty"`
	Status               int32    `protobuf:"varint,7,opt,name=Status,proto3" json:"Status,omitempty"`
	Temperature          int32    `protobuf:"varint,8,opt,name=Temperature,proto3" json:"Temperature,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *State) Reset()         { *m = State{} }
func (m *State) String() string { return proto.CompactTextString(m) }
func (*State) ProtoMessage()    {}
func (*State) Descriptor() ([]byte, []int) {
	return fileDescriptor_d258138af7183d5a, []int{8}
}

func (m *State) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_State.Unmarshal(m, b)
}
func (m *State) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_State.Marshal(b, m, deterministic)
}
func (m *State) XXX_Merge(src proto.Message) {
	xxx_messageInfo_State.Merge(m, src)
}
func (m *State) XXX_Size() int {
	return xxx_messageInfo_State.Size(m)
}
func (m *State) XXX_DiscardUnknown() {
	xxx_messageInfo_State.DiscardUnknown(m)
}

var xxx_messageInfo_State proto.InternalMessageInfo

func (m *State) GetButtonEvent() int32 {
	if m != nil {
		return m.ButtonEvent
	}
	return 0
}

func (m *State) GetDark() bool {
	if m != nil {
		return m.Dark
	}
	return false
}

func (m *State) GetDaylight() bool {
	if m != nil {
		return m.Daylight
	}
	return false
}

func (m *State) GetLastUpdated() string {
	if m != nil {
		return m.LastUpdated
	}
	return ""
}

func (m *State) GetLightLevel() int32 {
	if m != nil {
		return m.LightLevel
	}
	return 0
}

func (m *State) GetPresence() bool {
	if m != nil {
		return m.Presence
	}
	return false
}

func (m *State) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *State) GetTemperature() int32 {
	if m != nil {
		return m.Temperature
	}
	return 0
}

func init() {
	proto.RegisterType((*Empty)(nil), "hue.Empty")
	proto.RegisterType((*LightsRequest)(nil), "hue.LightsRequest")
	proto.RegisterType((*LightsResponse)(nil), "hue.LightsResponse")
	proto.RegisterType((*Groups)(nil), "hue.Groups")
	proto.RegisterType((*Group)(nil), "hue.Group")
	proto.RegisterType((*SensorRequest)(nil), "hue.SensorRequest")
	proto.RegisterType((*Sensors)(nil), "hue.Sensors")
	proto.RegisterType((*Sensor)(nil), "hue.Sensor")
	proto.RegisterType((*State)(nil), "hue.State")
}

func init() { proto.RegisterFile("hue.proto", fileDescriptor_d258138af7183d5a) }

var fileDescriptor_d258138af7183d5a = []byte{
	// 588 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x54, 0x5f, 0x6b, 0x13, 0x41,
	0x10, 0xef, 0x25, 0xbd, 0xe4, 0x32, 0xb1, 0xa5, 0xae, 0x22, 0x47, 0x11, 0x09, 0x0b, 0x6a, 0x28,
	0xa5, 0x48, 0x45, 0x5f, 0x7c, 0x0b, 0x29, 0x35, 0xd0, 0xda, 0xb2, 0x69, 0x15, 0xf4, 0xe9, 0xbc,
	0x4e, 0x9b, 0xa3, 0xe9, 0xde, 0x75, 0xff, 0x54, 0xfa, 0x39, 0xfc, 0x86, 0x7e, 0x03, 0x3f, 0x80,
	0x20, 0x3b, 0xbb, 0x97, 0x5c, 0xc9, 0x53, 0xdf, 0x66, 0x7e, 0xbf, 0xd9, 0xbd, 0xdf, 0x6f, 0x66,
	0xf6, 0xa0, 0x37, 0xb3, 0xb8, 0x57, 0xa9, 0xd2, 0x94, 0xac, 0x3d, 0xb3, 0xc8, 0xbb, 0x10, 0x1f,
	0xdc, 0x54, 0xe6, 0x9e, 0xff, 0x8e, 0x60, 0xe3, 0xa8, 0xb8, 0x9a, 0x19, 0x2d, 0xf0, 0xd6, 0xa2,
	0x36, 0xec, 0x39, 0xc4, 0x87, 0xaa, 0xb4, 0x55, 0x1a, 0x0d, 0xa2, 0x61, 0x2c, 0x7c, 0xc2, 0x76,
	0xe1, 0xe9, 0x48, 0xb9, 0x3a, 0x89, 0x5a, 0x9f, 0xa2, 0xca, 0x51, 0x9a, 0xb4, 0x35, 0x88, 0x86,
	0x2d, 0xb1, 0x4a, 0xb8, 0xea, 0x69, 0x66, 0xac, 0xca, 0x4c, 0x51, 0xca, 0xba, 0xba, 0xed, 0xab,
	0x57, 0x08, 0xb6, 0x05, 0xed, 0xcf, 0x16, 0xd3, 0x75, 0xe2, 0x5d, 0xc8, 0x77, 0x60, 0xb3, 0x16,
	0xa5, 0xab, 0x52, 0x6a, 0x64, 0x29, 0x74, 0xb5, 0xcd, 0x73, 0xd4, 0x9a, 0x74, 0x25, 0xa2, 0x4e,
	0xf9, 0x2e, 0x74, 0x48, 0xa2, 0x66, 0x1c, 0x3a, 0x57, 0x14, 0xa5, 0xd1, 0xa0, 0x3d, 0xec, 0xef,
	0xc3, 0x9e, 0x73, 0x4d, 0xa4, 0x08, 0x0c, 0xff, 0x11, 0xdc, 0xb1, 0x4d, 0x68, 0x4d, 0xc6, 0xc1,
	0x63, 0x6b, 0x32, 0x66, 0x0c, 0xd6, 0xbf, 0x64, 0x37, 0x48, 0x9e, 0x7a, 0x82, 0x62, 0x57, 0x73,
	0x22, 0x49, 0x77, 0x22, 0x5a, 0x27, 0x92, 0xbd, 0x02, 0x58, 0x7a, 0x25, 0xbd, 0xb1, 0x68, 0x20,
	0xfc, 0x2d, 0x6c, 0x4c, 0x51, 0xea, 0x52, 0xd5, 0xbd, 0x7c, 0x01, 0x1d, 0x0f, 0x84, 0x0f, 0x85,
	0x8c, 0xbf, 0x83, 0xae, 0x8f, 0x34, 0x7b, 0x0d, 0x5d, 0xed, 0xc3, 0xa0, 0xba, 0x4f, 0xaa, 0xc3,
	0x3d, 0x35, 0xc7, 0xff, 0x44, 0xf5, 0x55, 0x2b, 0xca, 0xb7, 0x21, 0x39, 0x97, 0xc5, 0xad, 0xc5,
	0xc9, 0x38, 0xa8, 0x5f, 0xe4, 0x0b, 0x57, 0xed, 0x86, 0x2b, 0x06, 0xeb, 0x67, 0xf7, 0x95, 0xef,
	0x77, 0x4f, 0x50, 0xcc, 0x76, 0x60, 0xeb, 0x38, 0x93, 0xf6, 0x32, 0xcb, 0x8d, 0x55, 0xa8, 0xe8,
	0x4c, 0x4c, 0xfc, 0x0a, 0xee, 0x46, 0x71, 0x5c, 0x5e, 0xe0, 0x7c, 0x32, 0x4e, 0x3b, 0x54, 0x52,
	0xa7, 0xec, 0x25, 0xf4, 0xa6, 0xdf, 0xbe, 0xa2, 0xd2, 0x45, 0x29, 0xd3, 0x2e, 0x71, 0x4b, 0x80,
	0x0d, 0x20, 0x9e, 0x9a, 0xcc, 0x60, 0x9a, 0x0c, 0xa2, 0xc5, 0x74, 0x08, 0x11, 0x9e, 0xe0, 0x7f,
	0xa3, 0x50, 0xc2, 0x06, 0xd0, 0x1f, 0x59, 0x63, 0x4a, 0x79, 0x70, 0xe7, 0x56, 0xc7, 0x9b, 0x6d,
	0x42, 0xce, 0xc5, 0x38, 0x53, 0xd7, 0xe4, 0x38, 0x11, 0x14, 0xbb, 0x4e, 0x8c, 0xb3, 0xfb, 0xb9,
	0x9b, 0x47, 0x98, 0xda, 0x22, 0x77, 0x37, 0x1e, 0x65, 0xda, 0x9c, 0x57, 0x17, 0x99, 0xc1, 0x8b,
	0x60, 0xbe, 0x09, 0xb9, 0xe9, 0xd2, 0xd2, 0x1d, 0xe1, 0x1d, 0xce, 0xc9, 0x7d, 0x2c, 0x1a, 0x88,
	0xbb, 0xfd, 0x54, 0xa1, 0x46, 0x99, 0x23, 0x19, 0x4f, 0xc4, 0x22, 0xa7, 0x41, 0x9b, 0xcc, 0x58,
	0x4d, 0xb6, 0xdd, 0xa0, 0x29, 0x73, 0x5f, 0x3d, 0xc3, 0x9b, 0x0a, 0x95, 0x5b, 0x7a, 0xef, 0x3c,
	0x16, 0x4d, 0x68, 0xff, 0x5f, 0x04, 0x1d, 0xbf, 0xeb, 0xec, 0x0d, 0xf4, 0x0e, 0xd1, 0x84, 0x65,
	0xf6, 0xed, 0xa1, 0x47, 0xba, 0xdd, 0x5f, 0x2e, 0xb2, 0xe6, 0x6b, 0x6c, 0x08, 0x70, 0x88, 0xa6,
	0x5e, 0xa0, 0x66, 0xe1, 0x93, 0xc6, 0xee, 0xb8, 0xca, 0x0f, 0x90, 0x4c, 0x7f, 0x15, 0x26, 0x9f,
	0x9d, 0x48, 0xc6, 0x88, 0x7b, 0xf0, 0xd6, 0xb7, 0x9f, 0x3d, 0xc0, 0xfc, 0x53, 0xe3, 0x6b, 0xec,
	0x23, 0xf4, 0xc2, 0xb1, 0xcb, 0xcb, 0xc7, 0x9c, 0xdb, 0x87, 0x78, 0x34, 0x2f, 0xe4, 0xf5, 0x23,
	0xce, 0x8c, 0xba, 0xdf, 0xe3, 0xbd, 0x4f, 0x33, 0x8b, 0x3f, 0x3b, 0xf4, 0x7b, 0x7a, 0xff, 0x3f,
	0x00, 0x00, 0xff, 0xff, 0x55, 0x16, 0xcf, 0xc3, 0xab, 0x04, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// LightsClient is the client API for Lights service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type LightsClient interface {
	GetGroups(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Groups, error)
	GetSensors(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Sensors, error)
	SwitchOn(ctx context.Context, in *LightsRequest, opts ...grpc.CallOption) (*LightsResponse, error)
	SwitchOff(ctx context.Context, in *LightsRequest, opts ...grpc.CallOption) (*LightsResponse, error)
	Blink(ctx context.Context, in *LightsRequest, opts ...grpc.CallOption) (*LightsResponse, error)
}

type lightsClient struct {
	cc *grpc.ClientConn
}

func NewLightsClient(cc *grpc.ClientConn) LightsClient {
	return &lightsClient{cc}
}

func (c *lightsClient) GetGroups(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Groups, error) {
	out := new(Groups)
	err := c.cc.Invoke(ctx, "/hue.Lights/GetGroups", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lightsClient) GetSensors(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Sensors, error) {
	out := new(Sensors)
	err := c.cc.Invoke(ctx, "/hue.Lights/GetSensors", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lightsClient) SwitchOn(ctx context.Context, in *LightsRequest, opts ...grpc.CallOption) (*LightsResponse, error) {
	out := new(LightsResponse)
	err := c.cc.Invoke(ctx, "/hue.Lights/SwitchOn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lightsClient) SwitchOff(ctx context.Context, in *LightsRequest, opts ...grpc.CallOption) (*LightsResponse, error) {
	out := new(LightsResponse)
	err := c.cc.Invoke(ctx, "/hue.Lights/SwitchOff", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lightsClient) Blink(ctx context.Context, in *LightsRequest, opts ...grpc.CallOption) (*LightsResponse, error) {
	out := new(LightsResponse)
	err := c.cc.Invoke(ctx, "/hue.Lights/Blink", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LightsServer is the server API for Lights service.
type LightsServer interface {
	GetGroups(context.Context, *Empty) (*Groups, error)
	GetSensors(context.Context, *Empty) (*Sensors, error)
	SwitchOn(context.Context, *LightsRequest) (*LightsResponse, error)
	SwitchOff(context.Context, *LightsRequest) (*LightsResponse, error)
	Blink(context.Context, *LightsRequest) (*LightsResponse, error)
}

// UnimplementedLightsServer can be embedded to have forward compatible implementations.
type UnimplementedLightsServer struct {
}

func (*UnimplementedLightsServer) GetGroups(ctx context.Context, req *Empty) (*Groups, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroups not implemented")
}
func (*UnimplementedLightsServer) GetSensors(ctx context.Context, req *Empty) (*Sensors, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSensors not implemented")
}
func (*UnimplementedLightsServer) SwitchOn(ctx context.Context, req *LightsRequest) (*LightsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SwitchOn not implemented")
}
func (*UnimplementedLightsServer) SwitchOff(ctx context.Context, req *LightsRequest) (*LightsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SwitchOff not implemented")
}
func (*UnimplementedLightsServer) Blink(ctx context.Context, req *LightsRequest) (*LightsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Blink not implemented")
}

func RegisterLightsServer(s *grpc.Server, srv LightsServer) {
	s.RegisterService(&_Lights_serviceDesc, srv)
}

func _Lights_GetGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LightsServer).GetGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hue.Lights/GetGroups",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LightsServer).GetGroups(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lights_GetSensors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LightsServer).GetSensors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hue.Lights/GetSensors",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LightsServer).GetSensors(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lights_SwitchOn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LightsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LightsServer).SwitchOn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hue.Lights/SwitchOn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LightsServer).SwitchOn(ctx, req.(*LightsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lights_SwitchOff_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LightsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LightsServer).SwitchOff(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hue.Lights/SwitchOff",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LightsServer).SwitchOff(ctx, req.(*LightsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lights_Blink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LightsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LightsServer).Blink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hue.Lights/Blink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LightsServer).Blink(ctx, req.(*LightsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Lights_serviceDesc = grpc.ServiceDesc{
	ServiceName: "hue.Lights",
	HandlerType: (*LightsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetGroups",
			Handler:    _Lights_GetGroups_Handler,
		},
		{
			MethodName: "GetSensors",
			Handler:    _Lights_GetSensors_Handler,
		},
		{
			MethodName: "SwitchOn",
			Handler:    _Lights_SwitchOn_Handler,
		},
		{
			MethodName: "SwitchOff",
			Handler:    _Lights_SwitchOff_Handler,
		},
		{
			MethodName: "Blink",
			Handler:    _Lights_Blink_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "hue.proto",
}
