// Code generated by protoc-gen-go. DO NOT EDIT.
// source: hue.proto

/*
Package hue is a generated protocol buffer package.

It is generated from these files:
	hue.proto

It has these top-level messages:
	LightsRequest
	LightsResponse
	Groups
	Group
	SensorRequest
	Sensors
	Sensor
	State
*/
package hue

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type LightsRequest struct {
	Group int32 `protobuf:"varint,1,opt,name=Group" json:"Group,omitempty"`
	// Value between 0 and 1
	BrightnessPercent float32 `protobuf:"fixed32,2,opt,name=BrightnessPercent" json:"BrightnessPercent,omitempty"`
}

func (m *LightsRequest) Reset()                    { *m = LightsRequest{} }
func (m *LightsRequest) String() string            { return proto.CompactTextString(m) }
func (*LightsRequest) ProtoMessage()               {}
func (*LightsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *LightsRequest) GetGroup() int32 {
	if m != nil {
		return m.Group
	}
	return 0
}

func (m *LightsRequest) GetBrightnessPercent() float32 {
	if m != nil {
		return m.BrightnessPercent
	}
	return 0
}

type LightsResponse struct {
	Success bool `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
}

func (m *LightsResponse) Reset()                    { *m = LightsResponse{} }
func (m *LightsResponse) String() string            { return proto.CompactTextString(m) }
func (*LightsResponse) ProtoMessage()               {}
func (*LightsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *LightsResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

type Groups struct {
	Groups []*Group `protobuf:"bytes,1,rep,name=groups" json:"groups,omitempty"`
}

func (m *Groups) Reset()                    { *m = Groups{} }
func (m *Groups) String() string            { return proto.CompactTextString(m) }
func (*Groups) ProtoMessage()               {}
func (*Groups) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Groups) GetGroups() []*Group {
	if m != nil {
		return m.Groups
	}
	return nil
}

type Group struct {
	ID         int32  `protobuf:"varint,1,opt,name=ID" json:"ID,omitempty"`
	Name       string `protobuf:"bytes,2,opt,name=Name" json:"Name,omitempty"`
	On         bool   `protobuf:"varint,3,opt,name=On" json:"On,omitempty"`
	Brightness int32  `protobuf:"varint,4,opt,name=Brightness" json:"Brightness,omitempty"`
}

func (m *Group) Reset()                    { *m = Group{} }
func (m *Group) String() string            { return proto.CompactTextString(m) }
func (*Group) ProtoMessage()               {}
func (*Group) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Group) GetID() int32 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *Group) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Group) GetOn() bool {
	if m != nil {
		return m.On
	}
	return false
}

func (m *Group) GetBrightness() int32 {
	if m != nil {
		return m.Brightness
	}
	return 0
}

type SensorRequest struct {
	Sensor int32 `protobuf:"varint,1,opt,name=Sensor" json:"Sensor,omitempty"`
}

func (m *SensorRequest) Reset()                    { *m = SensorRequest{} }
func (m *SensorRequest) String() string            { return proto.CompactTextString(m) }
func (*SensorRequest) ProtoMessage()               {}
func (*SensorRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *SensorRequest) GetSensor() int32 {
	if m != nil {
		return m.Sensor
	}
	return 0
}

type Sensors struct {
	Sensors []*Sensor `protobuf:"bytes,1,rep,name=sensors" json:"sensors,omitempty"`
}

func (m *Sensors) Reset()                    { *m = Sensors{} }
func (m *Sensors) String() string            { return proto.CompactTextString(m) }
func (*Sensors) ProtoMessage()               {}
func (*Sensors) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *Sensors) GetSensors() []*Sensor {
	if m != nil {
		return m.Sensors
	}
	return nil
}

type Sensor struct {
	ID               int32  `protobuf:"varint,1,opt,name=ID" json:"ID,omitempty"`
	UniqueID         string `protobuf:"bytes,2,opt,name=UniqueID" json:"UniqueID,omitempty"`
	Name             string `protobuf:"bytes,3,opt,name=Name" json:"Name,omitempty"`
	Type             string `protobuf:"bytes,4,opt,name=Type" json:"Type,omitempty"`
	ManufacturerName string `protobuf:"bytes,5,opt,name=ManufacturerName" json:"ManufacturerName,omitempty"`
	ModelID          string `protobuf:"bytes,6,opt,name=ModelID" json:"ModelID,omitempty"`
	SWVersion        string `protobuf:"bytes,7,opt,name=SWVersion" json:"SWVersion,omitempty"`
	State            *State `protobuf:"bytes,8,opt,name=State" json:"State,omitempty"`
}

func (m *Sensor) Reset()                    { *m = Sensor{} }
func (m *Sensor) String() string            { return proto.CompactTextString(m) }
func (*Sensor) ProtoMessage()               {}
func (*Sensor) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *Sensor) GetID() int32 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *Sensor) GetUniqueID() string {
	if m != nil {
		return m.UniqueID
	}
	return ""
}

func (m *Sensor) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Sensor) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *Sensor) GetManufacturerName() string {
	if m != nil {
		return m.ManufacturerName
	}
	return ""
}

func (m *Sensor) GetModelID() string {
	if m != nil {
		return m.ModelID
	}
	return ""
}

func (m *Sensor) GetSWVersion() string {
	if m != nil {
		return m.SWVersion
	}
	return ""
}

func (m *Sensor) GetState() *State {
	if m != nil {
		return m.State
	}
	return nil
}

type State struct {
	ButtonEvent int32  `protobuf:"varint,1,opt,name=ButtonEvent" json:"ButtonEvent,omitempty"`
	Dark        bool   `protobuf:"varint,2,opt,name=Dark" json:"Dark,omitempty"`
	Daylight    bool   `protobuf:"varint,3,opt,name=Daylight" json:"Daylight,omitempty"`
	LastUpdated string `protobuf:"bytes,4,opt,name=LastUpdated" json:"LastUpdated,omitempty"`
	LightLevel  int32  `protobuf:"varint,5,opt,name=LightLevel" json:"LightLevel,omitempty"`
	Presence    bool   `protobuf:"varint,6,opt,name=Presence" json:"Presence,omitempty"`
	Status      int32  `protobuf:"varint,7,opt,name=Status" json:"Status,omitempty"`
	Temperature int32  `protobuf:"varint,8,opt,name=Temperature" json:"Temperature,omitempty"`
}

func (m *State) Reset()                    { *m = State{} }
func (m *State) String() string            { return proto.CompactTextString(m) }
func (*State) ProtoMessage()               {}
func (*State) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *State) GetButtonEvent() int32 {
	if m != nil {
		return m.ButtonEvent
	}
	return 0
}

func (m *State) GetDark() bool {
	if m != nil {
		return m.Dark
	}
	return false
}

func (m *State) GetDaylight() bool {
	if m != nil {
		return m.Daylight
	}
	return false
}

func (m *State) GetLastUpdated() string {
	if m != nil {
		return m.LastUpdated
	}
	return ""
}

func (m *State) GetLightLevel() int32 {
	if m != nil {
		return m.LightLevel
	}
	return 0
}

func (m *State) GetPresence() bool {
	if m != nil {
		return m.Presence
	}
	return false
}

func (m *State) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *State) GetTemperature() int32 {
	if m != nil {
		return m.Temperature
	}
	return 0
}

func init() {
	proto.RegisterType((*LightsRequest)(nil), "hue.LightsRequest")
	proto.RegisterType((*LightsResponse)(nil), "hue.LightsResponse")
	proto.RegisterType((*Groups)(nil), "hue.Groups")
	proto.RegisterType((*Group)(nil), "hue.Group")
	proto.RegisterType((*SensorRequest)(nil), "hue.SensorRequest")
	proto.RegisterType((*Sensors)(nil), "hue.Sensors")
	proto.RegisterType((*Sensor)(nil), "hue.Sensor")
	proto.RegisterType((*State)(nil), "hue.State")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Lights service

type LightsClient interface {
	GetGroups(ctx context.Context, in *LightsRequest, opts ...grpc.CallOption) (*Groups, error)
	GetSensors(ctx context.Context, in *SensorRequest, opts ...grpc.CallOption) (*Sensors, error)
	SwitchOn(ctx context.Context, in *LightsRequest, opts ...grpc.CallOption) (*LightsResponse, error)
	SwitchOff(ctx context.Context, in *LightsRequest, opts ...grpc.CallOption) (*LightsResponse, error)
	Blink(ctx context.Context, in *LightsRequest, opts ...grpc.CallOption) (*LightsResponse, error)
}

type lightsClient struct {
	cc *grpc.ClientConn
}

func NewLightsClient(cc *grpc.ClientConn) LightsClient {
	return &lightsClient{cc}
}

func (c *lightsClient) GetGroups(ctx context.Context, in *LightsRequest, opts ...grpc.CallOption) (*Groups, error) {
	out := new(Groups)
	err := grpc.Invoke(ctx, "/hue.Lights/GetGroups", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lightsClient) GetSensors(ctx context.Context, in *SensorRequest, opts ...grpc.CallOption) (*Sensors, error) {
	out := new(Sensors)
	err := grpc.Invoke(ctx, "/hue.Lights/GetSensors", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lightsClient) SwitchOn(ctx context.Context, in *LightsRequest, opts ...grpc.CallOption) (*LightsResponse, error) {
	out := new(LightsResponse)
	err := grpc.Invoke(ctx, "/hue.Lights/SwitchOn", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lightsClient) SwitchOff(ctx context.Context, in *LightsRequest, opts ...grpc.CallOption) (*LightsResponse, error) {
	out := new(LightsResponse)
	err := grpc.Invoke(ctx, "/hue.Lights/SwitchOff", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lightsClient) Blink(ctx context.Context, in *LightsRequest, opts ...grpc.CallOption) (*LightsResponse, error) {
	out := new(LightsResponse)
	err := grpc.Invoke(ctx, "/hue.Lights/Blink", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Lights service

type LightsServer interface {
	GetGroups(context.Context, *LightsRequest) (*Groups, error)
	GetSensors(context.Context, *SensorRequest) (*Sensors, error)
	SwitchOn(context.Context, *LightsRequest) (*LightsResponse, error)
	SwitchOff(context.Context, *LightsRequest) (*LightsResponse, error)
	Blink(context.Context, *LightsRequest) (*LightsResponse, error)
}

func RegisterLightsServer(s *grpc.Server, srv LightsServer) {
	s.RegisterService(&_Lights_serviceDesc, srv)
}

func _Lights_GetGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LightsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LightsServer).GetGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hue.Lights/GetGroups",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LightsServer).GetGroups(ctx, req.(*LightsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lights_GetSensors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SensorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LightsServer).GetSensors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hue.Lights/GetSensors",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LightsServer).GetSensors(ctx, req.(*SensorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lights_SwitchOn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LightsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LightsServer).SwitchOn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hue.Lights/SwitchOn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LightsServer).SwitchOn(ctx, req.(*LightsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lights_SwitchOff_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LightsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LightsServer).SwitchOff(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hue.Lights/SwitchOff",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LightsServer).SwitchOff(ctx, req.(*LightsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lights_Blink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LightsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LightsServer).Blink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hue.Lights/Blink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LightsServer).Blink(ctx, req.(*LightsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Lights_serviceDesc = grpc.ServiceDesc{
	ServiceName: "hue.Lights",
	HandlerType: (*LightsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetGroups",
			Handler:    _Lights_GetGroups_Handler,
		},
		{
			MethodName: "GetSensors",
			Handler:    _Lights_GetSensors_Handler,
		},
		{
			MethodName: "SwitchOn",
			Handler:    _Lights_SwitchOn_Handler,
		},
		{
			MethodName: "SwitchOff",
			Handler:    _Lights_SwitchOff_Handler,
		},
		{
			MethodName: "Blink",
			Handler:    _Lights_Blink_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "hue.proto",
}

func init() { proto.RegisterFile("hue.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 576 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x54, 0xe1, 0x6e, 0xd3, 0x40,
	0x0c, 0x5e, 0xd2, 0x25, 0x4d, 0x5c, 0x36, 0xc1, 0x81, 0x50, 0x34, 0x4d, 0x28, 0x8a, 0x84, 0x98,
	0xa6, 0x51, 0x4d, 0x43, 0xf0, 0x00, 0x55, 0xd0, 0xa8, 0xb4, 0xb1, 0xea, 0xba, 0xc1, 0x0f, 0x7e,
	0x85, 0xd4, 0x5b, 0xa3, 0x75, 0x97, 0xec, 0xee, 0x52, 0xb4, 0x87, 0xe0, 0x25, 0x79, 0x03, 0xde,
	0x00, 0x9d, 0x73, 0x69, 0x33, 0x95, 0x3f, 0xfb, 0x67, 0x7f, 0x3e, 0xdb, 0xdf, 0x67, 0x3b, 0x81,
	0x70, 0x5e, 0xe3, 0xb0, 0x92, 0xa5, 0x2e, 0x59, 0x6f, 0x5e, 0x63, 0x32, 0x85, 0x9d, 0xb3, 0xe2,
	0x66, 0xae, 0x15, 0xc7, 0xfb, 0x1a, 0x95, 0x66, 0xaf, 0xc0, 0x3b, 0x95, 0x65, 0x5d, 0x45, 0x4e,
	0xec, 0x1c, 0x78, 0xbc, 0x71, 0xd8, 0x11, 0xbc, 0x18, 0x49, 0xf3, 0x4e, 0xa0, 0x52, 0x13, 0x94,
	0x39, 0x0a, 0x1d, 0xb9, 0xb1, 0x73, 0xe0, 0xf2, 0xcd, 0x40, 0x72, 0x08, 0xbb, 0x6d, 0x51, 0x55,
	0x95, 0x42, 0x21, 0x8b, 0xa0, 0xaf, 0xea, 0x3c, 0x47, 0xa5, 0xa8, 0x6e, 0xc0, 0x5b, 0x37, 0x39,
	0x02, 0x9f, 0x5a, 0x28, 0x96, 0x80, 0x7f, 0x43, 0x56, 0xe4, 0xc4, 0xbd, 0x83, 0xc1, 0x09, 0x0c,
	0x0d, 0x57, 0x0a, 0x72, 0x1b, 0x49, 0x7e, 0x58, 0x76, 0x6c, 0x17, 0xdc, 0x71, 0x6a, 0x39, 0xba,
	0xe3, 0x94, 0x31, 0xd8, 0xfe, 0x9a, 0xdd, 0x21, 0x71, 0x0a, 0x39, 0xd9, 0xe6, 0xcd, 0x85, 0x88,
	0x7a, 0xd4, 0xcf, 0xbd, 0x10, 0xec, 0x0d, 0xc0, 0x9a, 0x6b, 0xb4, 0x4d, 0xb9, 0x1d, 0x24, 0x79,
	0x07, 0x3b, 0x53, 0x14, 0xaa, 0x94, 0xed, 0x2c, 0x5e, 0x83, 0xdf, 0x00, 0xb6, 0x91, 0xf5, 0x92,
	0x63, 0xe8, 0x37, 0x96, 0x62, 0x6f, 0xa1, 0xaf, 0x1a, 0xd3, 0xb2, 0x1e, 0x10, 0x6b, 0x5b, 0xa7,
	0x8d, 0x25, 0x7f, 0x9c, 0xb6, 0xd4, 0x06, 0xf3, 0x3d, 0x08, 0xae, 0x44, 0x71, 0x5f, 0xe3, 0x38,
	0xb5, 0xec, 0x57, 0xfe, 0x4a, 0x55, 0xaf, 0xa3, 0x8a, 0xc1, 0xf6, 0xe5, 0x43, 0x85, 0xc4, 0x3f,
	0xe4, 0x64, 0xb3, 0x43, 0x78, 0x7e, 0x9e, 0x89, 0xfa, 0x3a, 0xcb, 0x75, 0x2d, 0x51, 0x52, 0x8e,
	0x47, 0xf1, 0x0d, 0xdc, 0xac, 0xe2, 0xbc, 0x9c, 0xe1, 0x62, 0x9c, 0x46, 0x3e, 0x3d, 0x69, 0x5d,
	0xb6, 0x0f, 0xe1, 0xf4, 0xfb, 0x37, 0x94, 0xaa, 0x28, 0x45, 0xd4, 0xa7, 0xd8, 0x1a, 0x60, 0x31,
	0x78, 0x53, 0x9d, 0x69, 0x8c, 0x82, 0xd8, 0x59, 0x6d, 0x87, 0x10, 0xde, 0x04, 0x92, 0xbf, 0x8e,
	0x7d, 0xc2, 0x62, 0x18, 0x8c, 0x6a, 0xad, 0x4b, 0xf1, 0x79, 0x69, 0x0e, 0xa5, 0x11, 0xdb, 0x85,
	0x8c, 0x8a, 0x34, 0x93, 0xb7, 0xa4, 0x38, 0xe0, 0x64, 0x9b, 0x49, 0xa4, 0xd9, 0xc3, 0xc2, 0xec,
	0xc3, 0x6e, 0x6d, 0xe5, 0x9b, 0x8a, 0x67, 0x99, 0xd2, 0x57, 0xd5, 0x2c, 0xd3, 0x38, 0xb3, 0xe2,
	0xbb, 0x90, 0xd9, 0x2e, 0x1d, 0xdd, 0x19, 0x2e, 0x71, 0x41, 0xea, 0x3d, 0xde, 0x41, 0x4c, 0xf5,
	0x89, 0x44, 0x85, 0x22, 0x47, 0x12, 0x1e, 0xf0, 0x95, 0x4f, 0x8b, 0xd6, 0x99, 0xae, 0x15, 0xc9,
	0x36, 0x8b, 0x26, 0xcf, 0x74, 0xbd, 0xc4, 0xbb, 0x0a, 0x65, 0x66, 0xe6, 0x47, 0xca, 0x3d, 0xde,
	0x85, 0x4e, 0x7e, 0xbb, 0xe0, 0x37, 0xb7, 0xce, 0x86, 0x10, 0x9e, 0xa2, 0xb6, 0xc7, 0xcc, 0x68,
	0x3c, 0x8f, 0x3e, 0xad, 0xbd, 0xc1, 0xfa, 0xa0, 0x55, 0xb2, 0xc5, 0x8e, 0x01, 0x4e, 0x51, 0xb7,
	0x87, 0xc4, 0xba, 0x77, 0x63, 0x13, 0x9e, 0x75, 0x30, 0x93, 0xf1, 0x11, 0x82, 0xe9, 0xaf, 0x42,
	0xe7, 0xf3, 0x0b, 0xf1, 0xdf, 0x06, 0x2f, 0x1f, 0x61, 0xcd, 0xa7, 0x97, 0x6c, 0xb1, 0x4f, 0x10,
	0xda, 0xb4, 0xeb, 0xeb, 0xa7, 0xe4, 0x9d, 0x80, 0x37, 0x5a, 0x14, 0xe2, 0xf6, 0x09, 0x39, 0xa3,
	0x43, 0xd8, 0xcf, 0xcb, 0xbb, 0x61, 0x31, 0x2b, 0xdf, 0x2b, 0x94, 0xcb, 0x22, 0x47, 0x35, 0x24,
	0xa0, 0xd4, 0x26, 0x61, 0x14, 0x7c, 0xa9, 0x71, 0x62, 0x7e, 0x3f, 0x13, 0xe7, 0xa7, 0x4f, 0xff,
	0xa1, 0x0f, 0xff, 0x02, 0x00, 0x00, 0xff, 0xff, 0x50, 0xb9, 0x94, 0x52, 0x94, 0x04, 0x00, 0x00,
}
